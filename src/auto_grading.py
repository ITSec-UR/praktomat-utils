#!/usr/bin/python

import os
from pathlib import Path

from database import connect_db, run_sql


def grade_solutions(conn, task_id, admin_id, id_passed=None, id_failed=None):
    """Creates attestations for all tutorial students.

    Parameters:
    conn - Connection to Database
    task_id - ID for task
    admin_id - ID for admin account
    id_passed - Ratingscaleitem used for passed assignments
    id_failed - Ratingscaleitem used for failed assignments

    """
    if not id_passed or not id_failed:
        _, id_failed, id_passed = get_rating_by_task_id(conn, task_id)

    public_comment = "This attestation was automatically generated by Praktomat. If all required JUnit tests pass (excluding style checks), the result is marked as passed; otherwise, it is marked as not passed. To better understand any failed tests, please run the JUnit tests locally."

    query_grade_passed = f"""
    INSERT INTO attestation_attestation (created, public_comment, private_comment, final, published, published_on, author_id, final_grade_id, solution_id)
    SELECT now(), '{public_comment}', '', 't', 't', now(), {admin_id}, {id_passed}, solutions_solution.id
    FROM accounts_user, solutions_solution, tasks_task
    WHERE accounts_user.user_ptr_id = solutions_solution.author_id AND tasks_task.id = solutions_solution.task_id AND accounts_user.user_ptr_id = solutions_solution.author_id AND solutions_solution.final = 't' AND solutions_solution.accepted = 't' AND solutions_solution.plagiarism  = 'f' AND 't' IN (SELECT bool_and(passed) FROM checker_checkerresult WHERE solution_id = solutions_solution.id AND object_id NOT IN (SELECT id FROM checker_checkstylechecker)) AND tasks_task.id = {task_id} AND NOT EXISTS (SELECT solution_id FROM attestation_attestation WHERE attestation_attestation.solution_id = solutions_solution.id) RETURNING id;
    """

    query_grade_failed = f"""
    INSERT INTO attestation_attestation (created, public_comment, private_comment, final, published, published_on, author_id, final_grade_id, solution_id)
    SELECT now(), '{public_comment}', '', 't', 't', now(), {admin_id}, {id_failed}, solutions_solution.id FROM accounts_user, solutions_solution, tasks_task
    WHERE accounts_user.user_ptr_id = solutions_solution.author_id AND tasks_task.id = solutions_solution.task_id AND accounts_user.user_ptr_id = solutions_solution.author_id AND solutions_solution.final = 't' AND (solutions_solution.plagiarism  = 't' OR 'f' IN (SELECT bool_and(passed) FROM checker_checkerresult WHERE solution_id = solutions_solution.id AND object_id NOT IN (SELECT id FROM checker_checkstylechecker))) AND tasks_task.id = {task_id} AND NOT EXISTS (SELECT solution_id FROM attestation_attestation WHERE attestation_attestation.solution_id = solutions_solution.id) RETURNING id;"""

    attestated_ids = []
    attestated_ids.extend(run_sql(conn, query_grade_passed))
    attestated_ids.extend(run_sql(conn, query_grade_failed))

    return [id[0] for id in attestated_ids]


def get_solutions_by_task(conn, task_id):
    """Retrieves all solution IDs for a given task."""
    return [s[0] for s in run_sql(conn, f"SELECT id FROM solutions_solution WHERE task_id = {task_id};")]


def get_solution_by_attestation(conn, attestation_id):
    """Retrieves all solution IDs for a given task."""
    return run_sql(conn, f"SELECT solution_id FROM attestation_attestation WHERE id = {attestation_id};")[0][0]


def get_attestation_by_solution(conn, solution_id):
    """Fetches the attestation ID for a given solution."""
    result = run_sql(conn, f"SELECT id FROM attestation_attestation WHERE solution_id = {solution_id};")
    return result[0][0] if result else None


def write_annotated_solution_files(conn, attested_ids, work_data):
    """Writes annotated solution files to the database."""
    for attestation_id in attested_ids:
        solution_id = get_solution_by_attestation(conn, attestation_id)
        solution_files = run_sql(
            conn, f"SELECT id, file FROM solutions_solutionfile WHERE solution_id = {solution_id};")
        for solution_file_id, file_path in solution_files:
            existing = run_sql(
                conn,
                """SELECT 1 FROM attestation_annotatedsolutionfile
                   WHERE attestation_id = %s AND solution_file_id = %s LIMIT 1;""",
                (attestation_id, solution_file_id)
            )

            if existing:
                continue  # Skip if already annotated

            filename: Path = Path(work_data) / file_path
            if filename.suffix in {'.iml'}:
                continue  # Skip uninteressting files

            try:
                file_content = filename.read_text()
                if file_content:
                    run_sql(
                        conn, "INSERT INTO attestation_annotatedsolutionfile (content, attestation_id, solution_file_id) VALUES (%s, %s, %s);", (str(file_content), attestation_id, solution_file_id))
            except (FileNotFoundError, IOError, UnicodeDecodeError) as e:
                print(f"Error reading file {file_path}: {e}")
            except Exception as e:
                print(f"Unexpected error: {e}")


def get_tasks(conn, task_name=None, rating_scale=None, wait_days=0, interval_days=30):
    """Retrieves tasks based on given parameters."""
    task_filter = f"AND title SIMILAR TO '{task_name}'" if task_name else ""
    rating_filter = f"AND final_grade_rating_scale_id = {rating_scale}" if rating_scale else ""
    interval_days_filter = f"AND submission_date > now() - INTERVAL '{wait_days + interval_days} DAY'" if interval_days else ""

    query = f"""
    SELECT id, title FROM tasks_task WHERE submission_date < now() - INTERVAL '{wait_days} DAY' {interval_days_filter} {task_filter}  {rating_filter} ORDER BY id ASC;
    """
    return run_sql(conn, query)


def get_rating_names(conn):
    """Fetches all rating scale names."""
    return [rating[0] for rating in run_sql(conn, f"SELECT name FROM attestation_ratingscale;")]


def get_rating_by_name(conn, rating_name):
    """Fetches rating scale and items by rating name."""
    rating = run_sql(conn, f"SELECT id FROM attestation_ratingscale WHERE name = '{rating_name}';")
    if not rating:
        raise ValueError(f"Couldn't find a rating with name = {rating_name}")
    rating_id = rating[0][0]

    items = run_sql(
        conn, f"SELECT id FROM attestation_ratingscaleitem WHERE scale_id = {rating_id} AND position < 2 ORDER BY position ASC;")
    if not items:
        raise ValueError(f"Couldn't find rating scale items for {rating_name}")

    return rating_id, items[0][0], items[1][0]


def get_rating_by_task_id(conn, task_id):
    """Fetches rating scale and items by rating name."""
    rating = run_sql(conn, f"SELECT final_grade_rating_scale_id FROM tasks_task WHERE id = {task_id};")
    if not rating:
        raise ValueError(f"Couldn't find a rating with task_id = {task_id}")
    rating_id = rating[0][0]

    items = run_sql(
        conn, f"SELECT id FROM attestation_ratingscaleitem WHERE scale_id = {rating_id} AND position < 2 ORDER BY position ASC;")
    if not items:
        raise ValueError(f"Couldn't find rating scale items for task_id {task_id}")

    return rating_id, items[0][0], items[1][0]


def get_admin_by_name(conn, admin_name):
    select_admin = f"SELECT id, username FROM auth_user WHERE username = '{admin_name}' AND is_superuser = 't';"
    user = run_sql(conn, select_admin)
    if not user or len(user) != 1:
        raise ValueError(f"Couldn't find a valid admin account with name = {admin_name}")

    return user[0]


def get_admin_by_id(conn, admin_id):
    select_admin = f"SELECT id, username FROM auth_user WHERE id = {admin_id} AND is_superuser = 't';"
    user = run_sql(conn, select_admin)
    if not user or len(user) != 1:
        raise ValueError(f"Couldn't find a valid admin account with id = {admin_id}")

    return user[0]


def run():
    """Main function to run the grading process."""
    conn = connect_db()
    if not conn:
        print("No connection is established!")
        exit(1)

    if 'PRAKTOMAT_ADMIN_NAME' in os.environ and not 'PRAKTOMAT_ADMIN_ID' in os.environ:
        admin_id, admin_name = get_admin_by_name(conn, os.environ['PRAKTOMAT_ADMIN_NAME'])
    else:
        admin_id, admin_name = get_admin_by_id(conn, os.environ.get("PRAKTOMAT_ADMIN_ID", 1))

    print(f"Grading initiated by admin ID: {admin_id}, username: {admin_name}")

    wait_days = int(os.environ.get("WAIT_DAYS", 0))
    interval_days = int(os.environ.get("INTERVAL_DAYS", 30))
    task_regexes = [e.strip() for e in os.environ.get('TASK_REGEX', "").split(',')]
    work_data = os.environ.get("WORK_DATA", "/work-data")
    if "RATING_NAME" in os.environ:
        rating_names = [e.strip() for e in os.environ["RATING_NAME"].split(',')]
    else:
        rating_names = get_rating_names(conn)

    for rating_name in rating_names:
        rating_scale, id_failed, id_passed = get_rating_by_name(conn, rating_name)
        for task_regex in task_regexes:
            print(f"Auto grading for task = {task_regex}, rating = {rating_name}")

            tasks = get_tasks(conn, task_regex, rating_scale, wait_days, interval_days)
            for task in tasks:
                task_id, task_name = task
                attested_ids = grade_solutions(conn, task_id, admin_id, id_passed, id_failed)
                print(f"[Report] task_name = {task_name}, task_id = {task_id}, num_attestation = {len(attested_ids)}")
                if attested_ids:
                    write_annotated_solution_files(conn, attested_ids, work_data)
    conn.close()


if __name__ == '__main__':
    run()
