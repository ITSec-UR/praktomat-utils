#!/usr/bin/python


from os import environ

from database import connect_db, run_sql


def grade_solutions(conn, task, id_admin, id_passed, id_failed):
    """Creates attestations for all tutorial students.

    Parameters:
    conn - Connection to Database
    task - ID for task
    id_passed - Ratingscaleitem used for passed assignments
    id_failed - Ratingscaleitem used for failed assignments

    """

    public_comment = "This attestation was automatically generated by Praktomat. If all required JUnit tests pass (excluding style checks), the result is marked as passed; otherwise, it is marked as not passed. To better understand any failed tests, please run the JUnit tests locally."

    query_grade_passed = f"""INSERT INTO attestation_attestation (created, public_comment, private_comment, final, published, published_on, author_id, final_grade_id, solution_id) SELECT now(), '{public_comment}', '', 't', 't', now(), {id_admin}, {id_passed}, solutions_solution.id FROM accounts_user, solutions_solution, tasks_task WHERE accounts_user.user_ptr_id = solutions_solution.author_id AND tasks_task.id = solutions_solution.task_id AND accounts_user.user_ptr_id = solutions_solution.author_id AND solutions_solution.final = 't' AND solutions_solution.accepted = 't' AND solutions_solution.plagiarism  = 'f' AND 't' IN (SELECT bool_and(passed) FROM checker_checkerresult WHERE solution_id = solutions_solution.id AND object_id NOT IN (SELECT id FROM checker_checkstylechecker)) AND tasks_task.id = {task} AND NOT EXISTS (SELECT solution_id FROM attestation_attestation WHERE attestation_attestation.solution_id = solutions_solution.id);"""

    query_grade_failed = f"""INSERT INTO attestation_attestation (created, public_comment, private_comment, final, published, published_on, author_id, final_grade_id, solution_id) SELECT now(), '{public_comment}', '', 't', 't', now(), {id_admin}, {id_failed}, solutions_solution.id FROM accounts_user, solutions_solution, tasks_task WHERE accounts_user.user_ptr_id = solutions_solution.author_id AND tasks_task.id = solutions_solution.task_id AND accounts_user.user_ptr_id = solutions_solution.author_id AND solutions_solution.final = 't' AND (solutions_solution.plagiarism  = 't' OR 'f' IN (SELECT bool_and(passed) FROM checker_checkerresult WHERE solution_id = solutions_solution.id AND object_id NOT IN (SELECT id FROM checker_checkstylechecker))) AND tasks_task.id = {task} AND NOT EXISTS (SELECT solution_id FROM attestation_attestation WHERE attestation_attestation.solution_id = solutions_solution.id);"""

    run_sql(conn, query_grade_passed)
    run_sql(conn, query_grade_failed)


def get_tasks(conn, regex_task, rating_scale, wait_days=5, interval_days=30):
    query_get_tasks = f"SELECT id FROM tasks_task WHERE title SIMILAR TO '{regex_task}' AND final_grade_rating_scale_id = {rating_scale} AND submission_date < now() - INTERVAL '{wait_days} DAY' AND publication_date > now() - INTERVAL '{wait_days + interval_days} DAY' ORDER BY id ASC;"
    return run_sql(conn, query_get_tasks)


def get_rating(conn, rating_name):
    query_get_rating = f"SELECT id FROM attestation_ratingscale WHERE name = '{rating_name}';"
    rating = run_sql(conn, query_get_rating)
    if not rating or len(rating) != 1:
        raise ValueError(f"Couldn't find a rating with name = {rating_name}")
    rating = rating[0][0]

    query_rating_item = f"SELECT id FROM attestation_ratingscaleitem WHERE scale_id = {rating} AND position < 2 ORDER BY position ASC;"
    result = run_sql(conn, query_rating_item)
    if not result:
        raise ValueError(f"Couldn't find rating scale items for {rating_name}")
    id_failed, id_passed = [r[0] for r in result]
    return rating, id_failed, id_passed


def get_admin(conn, admin_name):
    select_admin = f"SELECT id FROM auth_user WHERE username = '{admin_name}' AND is_superuser = 't';"
    user = run_sql(conn, select_admin)
    if not user or len(user) != 1:
        raise ValueError(f"Couldn't find a valid admin account with name = {admin_name}")

    return user[0][0]


def run():
    conn = connect_db()
    if not conn:
        print("No connection is established!")
        exit(1)

    if 'PRAKTOMAT_ADMIN_NAME' in environ and not 'PRAKTOMAT_ADMIN_ID' in environ:
        id_admin = get_admin(conn, environ['PRAKTOMAT_ADMIN_NAME'])
    else:
        id_admin = environ.get("PRAKTOMAT_ADMIN_ID", 1)

    print(f"Run Praktomat grade solutions for PRAKTOMAT_ADMIN_ID = {id_admin}")

    wait_days = int(environ.get("WAIT_DAYS", 5))
    interval_days = int(environ.get("INTERVAL_DAYS", 30))

    if 'TASK_REGEX' in environ:
        task_regexes = [e.strip() for e in environ['TASK_REGEX'].split(',')]
    else:
        task_regexes = ["H[0-9]{2}%", "Ãœ[0-9]{2}%"]

    ratings = [e.strip() for e in environ["RATING_REGEX"].split(',')]

    for rating_regex in ratings:
        rating_scale, id_failed, id_passed = get_rating(conn, rating_regex)
        for task_regex in task_regexes:
            print(f"Task = {task_regex} Rating = {rating_regex}")
            tasks = get_tasks(conn, task_regex, rating_scale, wait_days, interval_days)
            if tasks is None:
                raise ValueError(
                    f"Couldn't find any tasks with task regex = {task_regex} and rating_regex = {rating_regex}")
            for task in tasks:
                grade_solutions(conn, task[0], id_admin, id_passed, id_failed)
    conn.close()


if __name__ == '__main__':
    run()
